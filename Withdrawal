// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CrowdfundingETH {
    address public projectCreator;
    uint256 public goal;
    uint256 public deadline;
    mapping(address => uint256) public contributions;
    uint256 public totalContributions;

    event FundingReceived(address indexed contributor, uint256 amount);
    event ProjectFunded(uint256 totalAmount);
    event Withdrawal(address indexed recipient, uint256 amount);

    modifier onlyCreator() {
        require(msg.sender == projectCreator, "Only the project creator can call this function");
        _;
    }

    modifier deadlineReached() {
        require(block.timestamp >= deadline, "Deadline not reached yet");
        _;
    }

    constructor(uint256 _goal, uint256 durationDays) {
        projectCreator = msg.sender;
        goal = _goal;
        deadline = block.timestamp + durationDays * 1 days;
    }

    function contribute() external payable {
        require(block.timestamp < deadline, "Crowdfunding has ended");
        require(msg.value > 0, "Contribution amount must be greater than 0");

        contributions[msg.sender] += msg.value;
        totalContributions += msg.value;

        emit FundingReceived(msg.sender, msg.value);

        if (totalContributions >= goal) {
            emit ProjectFunded(totalContributions);
        }
    }

    function withdrawFunds() external onlyCreator deadlineReached {
        require(totalContributions >= goal, "Funding goal not reached");
        payable(projectCreator).transfer(totalContributions);
        emit Withdrawal(projectCreator, totalContributions);
    }

    function withdrawContribution() external {
        uint256 contributionAmount = contributions[msg.sender];
        require(contributionAmount > 0, "No contribution to withdraw");

        contributions[msg.sender] = 0;
        payable(msg.sender).transfer(contributionAmount);

        totalContributions -= contributionAmount;

        emit Withdrawal(msg.sender, contributionAmount);
    }
}
