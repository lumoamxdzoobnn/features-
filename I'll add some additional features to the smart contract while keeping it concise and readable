// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AdvancedSmartContract {
    address private owner;
    uint256 private data;
    uint256 private lastUpdateTime;

    event DataUpdated(uint256 newData, uint256 timestamp);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    modifier onlyAfter(uint256 time) {
        require(block.timestamp >= time, "Function can only be called after a certain time");
        _;
    }

    constructor(uint256 initialData) {
        owner = msg.sender;
        data = initialData;
        lastUpdateTime = block.timestamp;
    }

    function updateData(uint256 newData) external onlyOwner onlyAfter(lastUpdateTime + 1 hours) {
        require(newData != data, "New data must be different from current data");
        data = newData;
        lastUpdateTime = block.timestamp;
        emit DataUpdated(newData, lastUpdateTime);
    }

    function getData() external view returns (uint256) {
        return data;
    }

    function getOwner() external view returns (address) {
        return owner;
    }
}
